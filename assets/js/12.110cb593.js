(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{295:function(t,a,s){"use strict";s.r(a);var e=s(1),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// linux")]),t._v("\nyum install git"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("all\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// mac")]),t._v("\nbrew install git\n")])])]),s("h2",{attrs:{id:"config"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#config"}},[t._v("#")]),t._v(" config")]),t._v(" "),s("p",[s("strong",[t._v("全局 只需设置一直 设置后无法修改")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('git config --global user.name "John Doe"\ngit config --global user.email johndoe@example.com\n')])])]),s("p",[s("strong",[t._v("如果在单独的项目使用不用 user.name，则需输入没有 --global 即可")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('git config user.name "John Doe"\ngit config user.email johndeo@example.com\n')])])]),s("h2",{attrs:{id:"获取帮助"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取帮助"}},[t._v("#")]),t._v(" 获取帮助")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git help config\nman git-config\n")])])]),s("h2",{attrs:{id:"clone"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#clone"}},[t._v("#")]),t._v(" clone")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git clone xxxxxx\n\n# newDirName 表示用新文件名\ngit clone xxxxxx newDirName\n\n# 指定分支\ngit clone -b [branch-name] [url]\n")])])]),s("h2",{attrs:{id:"status"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#status"}},[t._v("#")]),t._v(" status")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# --long [Give the output in the long-format. this is the default]\n# -s, --short  [Give the output in the short-format]\n")])])]),s("h2",{attrs:{id:"diff"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#diff"}},[t._v("#")]),t._v(" diff")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 查看当前修改的代码\ngit diff\n\n# 缓存区\ngit diff --cached\n")])])]),s("h2",{attrs:{id:"log"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#log"}},[t._v("#")]),t._v(" log")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# long-format\ngit log\n\n# short-format\ngit log --stat\n\n# 当查看大数量信息时，一行显示\ngit log --pretty=oneline\n\n# 自定义显示\n# https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2#pretty_format\n")])])]),s("h2",{attrs:{id:"commit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commit"}},[t._v("#")]),t._v(" commit")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 用于撤回当前修改 commit message\ngit commit --amend\n")])])]),s("h2",{attrs:{id:"tag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tag"}},[t._v("#")]),t._v(" tag")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 打标签\ngit tag -a v0.1 -m 'my first tag'\n\n# 查看指定标签\ngit show v0.1\n\n# 忘记打某个版本标签\ngit tag -a v1.2 9fceb02[commit-id]\n")])])]),s("h2",{attrs:{id:"branch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#branch"}},[t._v("#")]),t._v(" branch")]),t._v(" "),s("p",[s("strong",[t._v("HEAD 指针关系")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 创建分支\ngit branch branch-name\n\n# 删除分支\ngit branch -d\n\n# 查看分支\ngit branch --all\n\n# 切换分支\ngit checkout branch-name\n\n# 创建并切换\ngit checkout -b branch-name\n\n# 合并分支\ngit merge branch-name\n")])])]),s("h1",{attrs:{id:"git-work-flow"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-work-flow"}},[t._v("#")]),t._v(" git work-flow")]),t._v(" "),s("p",[s("strong",[t._v("主题分支")])]),t._v(" "),s("p",[t._v("以功能命名的分支")]),t._v(" "),s("p",[t._v("ps: 请牢记，当你做这么多操作的时候，这些分支全部都存于本地。 当你新建和合并分支的时候，所有这一切都只发生在你本地的 Git 版本库中 —— 没有与服务器发生交互。")]),t._v(" "),s("h1",{attrs:{id:"rebase"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rebase"}},[t._v("#")]),t._v(" rebase")]),t._v(" "),s("p",[t._v("在 Git 中整合来自不同分支的修改主要有两种方法：merge 以及 rebase")]),t._v(" "),s("p",[t._v("ps: 不要通过rebase对任何已经提交到公共仓库中的commit进行修改（你自己一个人玩的分支除外）")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# rebase 博客\n# https://www.jianshu.com/p/4a8f4af4e803\n\n#合并多个 commit\ngit rebase -i HEAD~[number]\n")])])]),s("h1",{attrs:{id:"生成-ssh-公钥"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成-ssh-公钥"}},[t._v("#")]),t._v(" 生成 "),s("code",[t._v("SSH")]),t._v(" 公钥")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 目录\ncd ~/.ssh && ls\n\n# 生成公钥\nssh-keygen -o\n")])])]),s("h1",{attrs:{id:"搭建远程-git-仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#搭建远程-git-仓库"}},[t._v("#")]),t._v(" 搭建远程 "),s("code",[t._v("git")]),t._v(" 仓库")]),t._v(" "),s("p",[s("strong",[t._v("最快流程")])]),t._v(" "),s("h2",{attrs:{id:"_1、ps-一般我们是以团队开发，所以创建一个-git-目录来保存所有开发人员的秘钥"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、ps-一般我们是以团队开发，所以创建一个-git-目录来保存所有开发人员的秘钥"}},[t._v("#")]),t._v(" 1、ps: 一般我们是以团队开发，所以创建一个 git 目录来保存所有开发人员的秘钥")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 1.在 ~/.ssh 目录\nmkdir git && vim id_rsa_gavin.pub\n# 2.将成员秘钥写入 authorized_keys 文件\ncat id_rsa_gavin.pub >> ~/.ssh/authorized_keys\n")])])]),s("h2",{attrs:{id:"_2、初始-git-仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、初始-git-仓库"}},[t._v("#")]),t._v(" 2、初始 "),s("code",[t._v("git")]),t._v(" 仓库")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("cd /home\n\n# 创建一个裸存储库\ngit init --bare project.git\n")])])]),s("h2",{attrs:{id:"_3、在本地-clone-项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、在本地-clone-项目"}},[t._v("#")]),t._v(" 3、在本地 "),s("code",[t._v("clone")]),t._v(" 项目")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 如果没添加秘钥以下内容将会显示无权限\ngit clone root@ip_server:/home/project.git\n\ncd project\nvim README.md\ngit add -A\ngit commit -m 'first add'\ngit push\n")])])]),s("h2",{attrs:{id:"_4、查看记录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、查看记录"}},[t._v("#")]),t._v(" 4、查看记录")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# /home/project.git\ngit log\n")])])]),s("h1",{attrs:{id:"git-原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-原理"}},[t._v("#")]),t._v(" git 原理")]),t._v(" "),s("h2",{attrs:{id:"目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),s("ul",[s("li",[t._v("objects 目录存储所有数据内容")]),t._v(" "),s("li",[t._v("refs 目录存储指向数据（分支、远程仓库和标签等）的提交对象的指针")]),t._v(" "),s("li",[t._v("HEAD 文件指向目前被检出的分支")]),t._v(" "),s("li",[t._v("index 文件保存暂存区信息")])]),t._v(" "),s("h2",{attrs:{id:"git-对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-对象"}},[t._v("#")]),t._v(" git 对象")]),t._v(" "),s("p",[t._v("git 是一个内容寻址文件系统，这以为 git 是一个简单的键值对数据库(key-value data store)")]),t._v(" "),s("p",[s("strong",[t._v("使用 git hash-object 创建一个数据对象")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("echo 'test content' | git hash-object -w --stdin\nd670460b4b4aece5915caf5c68d12f560a9fe3e4\n\n# 查看 git 是如何存储数据的\nfind .git/objects -type f\n.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4\n\n# 读取数据\ngit cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4\ntest content\n")])])]),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("echo 'version 1' > test.txt\ngit hash-object -w test.txt\n\necho 'version 2' > test.txt\ngit hash-object -w test.txt\n\nrm test.txt\ngit cat-file -p xxxx >>> test.txt\ncat test.txt\nversion 2\n\n这里两个问题 \n1. 记住 SHA-1值 并不现实\n2. 文件名没有保存，仅保存了文件的内容\n上诉对象我们称为 数据对象(blob object)\n\ngit cat-file -t 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a\nblob\n")])])]),s("h3",{attrs:{id:"树对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#树对象"}},[t._v("#")]),t._v(" 树对象")])])}),[],!1,null,null,null);a.default=n.exports}}]);